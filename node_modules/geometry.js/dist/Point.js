"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point = /** @class */ (function () {
    function Point(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
        Object.freeze(this);
    }
    Point.prototype.add = function (point) {
        var adding = Point.instance(point);
        return new Point(this.x + adding.x, this.y + adding.y);
    };
    Point.prototype.subtract = function (point) {
        return new Point(this.x - point.x, this.y - point.y);
    };
    Point.prototype.product = function (point) {
        return this.x * point.y - this.y * point.x;
    };
    Point.prototype.equals = function (point) {
        return this.x === point.x && this.y === point.y;
    };
    Point.prototype.invert = function () {
        return new Point(-this.x, -this.y);
    };
    Point.prototype.distance = function (point) {
        return Math.sqrt(Math.pow(point.x - this.x, 2) + Math.pow(point.y - this.y, 2));
    };
    Point.prototype.manhattanDistance = function (point) {
        return Math.abs(point.x - this.x) + Math.abs(point.y - this.y);
    };
    Point.prototype.snapTo = function (xSize, ySize) {
        ySize = ySize || xSize;
        return new Point(xSize * Math.round(this.x / xSize), ySize * Math.round(this.y / ySize));
    };
    Point.prototype.theta = function (point) {
        var y = -(point.y - this.y);
        var x = point.x - this.x;
        var PRECISION = 10, zero = "0.0000000000";
        var rad = (y.toFixed(PRECISION) === zero && x.toFixed(PRECISION) === zero) ? 0 : Math.atan2(y, x);
        return 180 * ((rad < 0) ? (2 * Math.PI + rad) : rad) / Math.PI;
    };
    Object.defineProperty(Point.prototype, "transform", {
        get: function () {
            return "translate(" + this.toString() + ")";
        },
        enumerable: true,
        configurable: true
    });
    Point.prototype.toString = function () {
        return this.x + ", " + this.y;
    };
    Point.instance = function (x, y) {
        if (x instanceof Point)
            return x;
        if (x && x.hasOwnProperty('x'))
            return new Point(x.x, x.y);
        if (x && x.length && x.length >= 2)
            return new Point(x[0], x[1]);
        return new Point(x, y);
    };
    Point.fromString = function (str) {
        return new (Point.bind.apply(Point, [void 0].concat((str.split(',').map(function (val) { return parseInt(val, 10); })))))();
    };
    return Point;
}());
exports.default = Point;
//# sourceMappingURL=Point.js.map