"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Point_1 = require("./Point");
var Size_1 = require("./Size");
var Box_1 = require("./Box");
var _svgTpl = function (o, d) { return "M " + o.x + " " + o.y + " L " + d.x + " " + d.y; };
var Line = /** @class */ (function () {
    function Line(origin, destination) {
        this.origin = origin;
        this.destination = destination;
        Object.freeze(this);
    }
    Line.prototype.from = function (origin) {
        return new Line(origin, this.destination);
    };
    Line.prototype.to = function (destination) {
        return new Line(this.origin, destination);
    };
    Line.prototype.add = function (offset) {
        return new Line(this.origin.add(offset), this.destination.add(offset));
    };
    Line.prototype.crosses = function (line) {
        var q = ((this.origin.y - line.origin.y) *
            (line.destination.x - line.origin.x) -
            (this.origin.x - line.origin.x) *
                (line.destination.y - line.origin.y));
        var d = ((this.destination.x - this.origin.x) *
            (line.destination.y - line.origin.y) -
            (this.destination.y - this.origin.y) *
                (line.destination.x - line.origin.x));
        if (d === 0)
            return false;
        var r = q / d;
        q = ((this.origin.y - line.origin.y) *
            (this.destination.x - this.origin.x) -
            (this.origin.x - line.origin.x) *
                (this.destination.y - this.origin.y));
        var s = q / d;
        return !(r < 0 || r > 1 || s < 0 || s > 1);
    };
    Line.prototype.intersection = function (line) {
        var denominator, a, b, numerator1, numerator2;
        denominator = ((line.destination.y - line.origin.y) * (this.destination.x - this.origin.x)) - ((line.destination.x - line.origin.x) * (this.destination.y - this.origin.y));
        if (denominator === 0) {
            return null;
        }
        a = this.origin.y - line.origin.y;
        b = this.origin.x - line.origin.x;
        numerator1 = ((line.destination.x - line.origin.x) * a) - ((line.destination.y - line.origin.y) * b);
        numerator2 = ((this.destination.x - this.origin.x) * a) - ((this.destination.y - this.origin.y) * b);
        a = numerator1 / denominator;
        b = numerator2 / denominator;
        if (!(a > 0 && a < 1) || !(b > 0 && b < 1)) {
            return null;
        }
        return new Point_1.default(this.origin.x + (a * (this.destination.x - this.origin.x)), this.origin.y + (a * (this.destination.y - this.origin.y)));
    };
    Line.prototype.intersects = function (box) {
        var _this = this;
        return (box.contains(this.origin) ||
            box.contains(this.destination) ||
            box.edges().map(function (edge) { return edge.crosses(_this); }).indexOf(true) >= 0);
    };
    Line.prototype.bounds = function () {
        return new Box_1.default(new Point_1.default(Math.min(this.origin.x, this.destination.x), Math.min(this.origin.y, this.destination.y)), new Size_1.default(Math.abs(this.origin.x - this.destination.x), Math.abs(this.origin.y - this.destination.y)));
    };
    Line.prototype.toStyle = function () {
        var x1 = this.origin.x, y1 = this.origin.y, x2 = this.destination.x, y2 = this.destination.y;
        var length = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
        var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
        var transform = "rotate(" + angle + "deg)";
        return {
            '-webkit-transform': transform,
            '-moz-transform': transform,
            transform: transform,
            width: length,
            left: x1,
            top: y1
        };
    };
    Line.prototype.toPairs = function () {
        return [this.origin.x, this.origin.y, this.destination.x, this.destination.y];
    };
    Line.prototype.toSVG = function () {
        return _svgTpl(this.origin, this.destination);
    };
    Line.fromPairs = function (x1, y1, x2, y2) {
        return new Line(new Point_1.default(x1, y1), new Point_1.default(x2, y2));
    };
    return Line;
}());
exports.default = Line;
//# sourceMappingURL=Line.js.map